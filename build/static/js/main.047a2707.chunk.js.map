{"version":3,"sources":["Components/TOC.js","Components/Subject.js","Components/Content.js","App.js","serviceWorker.js","index.js"],"names":["TOC","href","Component","Subject","Container","textAlign","this","props","title","sub","Contents","Header","as","attached","Segment","desc","App","className","Divider","Content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAgBeA,E,uKAXX,OACE,6BACA,4BACI,4BAAI,uBAAGC,KAAM,UAAT,SACJ,4BAAI,uBAAGA,KAAM,UAAT,QACJ,4BAAI,uBAAGA,KAAM,UAAT,qB,GARIC,a,SCgBHC,E,uKAVX,OACE,gCACM,kBAACC,EAAA,EAAD,CAAWC,UAAU,UAClB,4BAAKC,KAAKC,MAAMC,OAChB,4BAAKF,KAAKC,MAAME,W,GAPTP,a,kBCaPQ,E,uKAZX,OACE,iCACM,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,SAAS,OACpBP,KAAKC,MAAMC,OAEhB,kBAACM,EAAA,EAAD,CAASD,UAAQ,GACZP,KAAKC,MAAMQ,W,GATLb,a,kBCsBRc,E,uKAdX,OACE,yBAAKC,UAAY,OAET,kBAAC,EAAD,CAAST,MAAM,MAAMC,IAAK,mBAC1B,kBAAC,EAAD,CAASD,MAAM,QAAQC,IAAK,8BAChC,kBAACL,EAAA,EAAD,CAAWC,UAAU,aACrB,kBAACa,EAAA,EAAD,MACE,2BAAG,kBAAC,EAAD,OACH,2BAAG,kBAACC,EAAD,CAAUX,MAAO,OAAOO,KAAK,gD,GAV1Bb,a,OCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.047a2707.chunk.js","sourcesContent":["import React ,{Component} from 'react';\r\n\r\nclass TOC extends Component\r\n{\r\n  render(){\r\n    return (\r\n      <nav>\r\n      <ul>\r\n          <li><a href =\"1.html\">HTML</a></li>\r\n          <li><a href =\"2.html\">CSS</a></li>\r\n          <li><a href =\"3.html\">JavaScript</a></li>\r\n      </ul>\r\n  </nav>\r\n    );\r\n  }\r\n}\r\nexport default TOC;","import React,{Component} from 'react';\r\n\r\nimport { Container} from 'semantic-ui-react'\r\n\r\n\r\nclass Subject extends Component\r\n{\r\n  render(){\r\n    return (\r\n      <header>\r\n            <Container textAlign='center'>\r\n               <h1>{this.props.title}</h1>\r\n               <h3>{this.props.sub}</h3>                \r\n            </Container>           \r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default Subject;","import React ,{Component} from 'react';\r\nimport {Header,Segment } from 'semantic-ui-react'\r\n\r\nclass Contents extends Component\r\n{\r\n  render(){\r\n    return (\r\n      <article>  \r\n            <Header as='h2' attached='top'>\r\n                {this.props.title}\r\n            </Header> \r\n            <Segment attached>\r\n                {this.props.desc}\r\n            </Segment>             \r\n      </article>\r\n    );\r\n  }\r\n}\r\nexport default Contents;","import React, { Component } from 'react';\nimport TOC from './Components/TOC';\nimport Subject from './Components/Subject';\nimport Contents from './Components/Content';\nimport './App.css';\n//import ContainerExample from './Components/ContainerExampleAlignment'\n\nimport { Container, Divider } from 'semantic-ui-react'\n\nclass App extends Component{\n  render(){\n    return(\n      <div className = \"App\">         \n          \n              <Subject title=\"Web\" sub =\"World Wide Web\"></Subject>            \n              <Subject title=\"React\" sub =\"React is Veryeasy WebApp!\"></Subject>                            \n          <Container textAlign='justified'>   \n          <Divider/>                  \n            <p><TOC></TOC></p>\n            <p><Contents title =\"HTML\" desc=\"HTML is HyerperText Markup Language.\"></Contents></p>\n          </Container>       \n      </div>\n    );    \n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}